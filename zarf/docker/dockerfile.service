# Build the Go Binary.
FROM golang:1.21.4 as build_sales-api
ENV CGO_ENABLED 0
ARG BUILD_REF

# Note: These are four commands that you need to use if you're not gonna use the vendor folder
# Create the service directory and the copy the module files first and then
# download the dependencies. If this doesn't change, we won't need to do this
# again in future builds.
# RUN mkdir /service
# COPY go.* /service/
# WORKDIR /service
# RUN go mod download

# Note: If you use the vendor folder for building the docker image, run this command instead of four commands above
# Copy the source code into the container.
COPY . /service

# Build the service binary.
WORKDIR /service/app/services/sales-api
RUN go build -ldflags "-X main.build=${BUILD_REF}"

# Run the Go Binary in Alpine.
FROM alpine:3.18
ARG BUILD_DATE
ARG BUILD_REF
RUN addgroup -g 1000 -S sales && \
    adduser -u 1000 -h /service -G sales -S sales

# This is a security concern. Do not do this in production and in k8s, instead, we use vault to be running in a sidecar in the cluster and
# will write the keys to disk, so we can assume that it's there
COPY --from=build_sales-api --chown=sales:sales /service/zarf/keys/. /service/zarf/keys/.
COPY --from=build_sales-api --chown=sales:sales /service/app/services/sales-api/sales-api /service/sales-api
WORKDIR /service
USER sales
CMD ["./sales-api"]

LABEL org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.title="sales-api" \
      org.opencontainers.image.authors="William Kennedy <bill@ardanlabs.com>" \
      org.opencontainers.image.source="https://github.com/ardanlabs/service/tree/master/app/services/sales-api" \
      org.opencontainers.image.revision="${BUILD_REF}" \
      org.opencontainers.image.vendor="Ardan Labs"